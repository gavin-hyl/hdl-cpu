MODULE      CPU
TITLE      'Caltech10 CPU'


" Description:  This is a template file for implementing the Caltech10 CPU.
"               It is the top-level module which will instantiate and connect
"               all other modules.
"
" Inputs:         ProgramDB[15..0]  - the 16-bit program data bus
"                 Reset             - system reset signal
"                 Clock             - system clock
"
" I/O:            DataDB[7..0]      - the 8-bit data data bus
"
" Outputs:        ProgramAB[12..0]  - the 13-bit program address bus
"                 DataAB[7..0]      - the 8-bit data address bus
"                 RD                - read signal for the data data bus
"                 WR                - write signal for the data data bus
"                 IO                - memory (0) or I/O (1) is being accessed
"
" Status Outputs: Accum[7..0]       - the 8-bit accumulator
"                 Flags[7..0]       - the 8-bit flag register
"                 XReg[7..0]        - the 8-bit X register
"                 SReg[7..0]        - the 8-bit S register


" Revision History:
" 02/15/18  Glen George     Initial Revision
" 01/05/21  Glen George     Updated comments
" 03/05/24  Gavin Hua       Pulled from website
" 03/08/24  Gavin Hua       Instantiated and connected modules

" Pin/Signal Declarations

" Inputs

ProgramDB15..ProgramDB0	pin;	"input  16-bit instruction data bus
Reset           	pin;	"input  system reset signal
Clock           	pin;	"input  system clock


" I/O

DataDB7..DataDB0	pin;	"I/O  8-bit Data data bus


" Outputs

ProgramAB12..ProgramAB0	pin;	"output  the 13-bit Program address bus
DataAB7..DataAB0	pin;	"output  the 8-bit Data address bus
RD			pin;	"output  read signal for the Data data bus
WR			pin;	"output  write signal for the Data data bus
IO			pin;	"output  accessing memory (0) or I/O (1)


" Debugging/Status Outputs

Accum7..Accum0		pin;	"the 8-bit accumulator
Flags7..Flags0		pin;	"the flags (8 bits)
XReg7..XReg0		pin;	"the 8-bit X register
SReg7..SReg0		pin;	"the 8-bit S register


" declare the used modules

CU INTERFACE (Instr15..Instr0, Flags7..Flags0, Reset, Clock
                -> ALU_MaskSZ, ALU_MaskCV, ALU_CarryIn, ALU_UseAdder, ALU_UseSR,
                    ALU_Subtract, ALU_LogicMux3..ALU_LogicMux0, ALU_UseCarry,
                    ALU_MaskAccum, ALU_HoldAccum, ALU_LoadFlags, ALU_ClearFlags,
                    ALU_ShiftSR, ALU_LogicSR, ALU_LeftSR, ALU_InputMux1,
                    ALU_InputMux0,
                DAU_UseAccum, DAU_UseOffset, DAU_PreOp, DAU_Inc, DAU_Dec,
                    DAU_UseX, DAU_UseS,
                PAU_Direct, PAU_Relative, PAU_Hold, PAU_RTS0, PAU_RTS1, PAU_Inc,
                    PAU_FromIR,
                RD, WR, IO, DDB_Mux1, DDB_Mux0, IR15..IR0);

ALU INTERFACE (Data7..Data0, MaskSZ, MaskCV, CarryIn, UseAdder, UseSR, Subtract, 
                LogicMux3..LogicMux0, UseCarry, MaskAccum, HoldAccum, LoadFlags, 
                ClearFlags, ShiftSR, LogicSR, LeftSR, Reset, Clock
                -> Accum7..Accum0, Flags7..Flags0);

PAU INTERFACE (Offset7..Offset0, Direct12..Direct0, Direct, Relative, Hold, RTS0, 
                RTS1, Inc, Reset, Clock -> ProgAddr12..ProgAddr0, PC12..PC0);

DAU INTERFACE (Accum7..Accum0, Offset7..Offset0, UseAccum, UseOffset, PreOp, Inc,
                Dec, UseX, UseS, Reset, Clock
                -> DataAddr7..DataAddr0, XReg7..XReg0, SReg7..SReg0);

" create instances of the modules

CUnit       FUNCTIONAL_BLOCK        CU;
ALUnit      FUNCTIONAL_BLOCK        ALU;
PAUnit      FUNCTIONAL_BLOCK        PAU;
DAUnit      FUNCTIONAL_BLOCK        DAU;


" Busses

ProgramAB   = [ProgramAB12..ProgramAB0];"13-bit Program address bus
ProgramDB   = [ProgramDB15..ProgramDB0];"16-bit Program data bus
DataAB      = [DataAB7..DataAB0];	"8-bit Data address bus
DataDB      = [DataDB7..DataDB0];	"8-bit Data data bus
IRLowEight  = CUnit.[IR7..IR0];
Accum       = ALUnit.[Accum7..Accum0];
Flags       = ALUnit.[Flags7..Flags0];
XReg        = DAUnit.[XReg7..XReg0];
SReg        = DAUnit.[SReg7..SReg0];



EQUATIONS

CUnit.Reset = !Reset;
ALUnit.Reset = !Reset;
PAUnit.Reset = !Reset;
DAUnit.Reset = !Reset;
CUnit.Clock = Clock;
ALUnit.Clock = Clock;
PAUnit.Clock = Clock;
DAUnit.Clock = Clock;

CUnit.[Instr15..Instr0] = ProgramDB;
RD = CUnit.RD & !Clock;
WR = CUnit.WR & !Clock;
IO = CUnit.IO & !Clock;

[Accum7..Accum0] = Accum;
[Flags7..Flags0] = Flags;
[XReg7..XReg0] = XReg;
[SReg7..SReg0] = SReg;

CUnit.[Flags7..Flags0]  = ALUnit.[Flags7..Flags0];
ALUnit.MaskSZ           = CUnit.ALU_MaskSZ;
ALUnit.MaskCV           = CUnit.ALU_MaskCV;
ALUnit.CarryIn          = CUnit.ALU_CarryIn;
ALUnit.UseAdder         = CUnit.ALU_UseAdder;
ALUnit.UseSR            = CUnit.ALU_UseSR;
ALUnit.Subtract         = CUnit.ALU_Subtract;
ALUnit.LogicMux0        = CUnit.ALU_LogicMux0;
ALUnit.LogicMux1        = CUnit.ALU_LogicMux1;
ALUnit.LogicMux2        = CUnit.ALU_LogicMux2;
ALUnit.LogicMux3        = CUnit.ALU_LogicMux3;
ALUnit.UseCarry         = CUnit.ALU_UseCarry;
ALUnit.MaskAccum        = CUnit.ALU_MaskAccum;
ALUnit.HoldAccum        = CUnit.ALU_HoldAccum;
ALUnit.LoadFlags        = CUnit.ALU_LoadFlags;
ALUnit.ClearFlags       = CUnit.ALU_ClearFlags;
ALUnit.ShiftSR          = CUnit.ALU_ShiftSR;
ALUnit.LogicSR          = CUnit.ALU_LogicSR;
ALUnit.LeftSR           = CUnit.ALU_LeftSR;
" The input of the ALU is selected from one of four sources: the DDB, the low
" eight bits of the instruction, the X register, and the S register
ALUnit.[Data7..Data0]   = (DataDB & !CUnit.ALU_InputMux1 & !CUnit.ALU_InputMux0) #
                            (IRLowEight & !CUnit.ALU_InputMux1 & CUnit.ALU_InputMux0) #
                            (XReg & CUnit.ALU_InputMux1 & !CUnit.ALU_InputMux0) #
                            (SReg & CUnit.ALU_InputMux1 & CUnit.ALU_InputMux0);

DAUnit.UseAccum         = CUnit.DAU_UseAccum;
DAUnit.UseOffset        = CUnit.DAU_UseOffset;
DAUnit.PreOp            = CUnit.DAU_PreOp;
DAUnit.Inc              = CUnit.DAU_Inc;
DAUnit.Dec              = CUnit.DAU_Dec;
DAUnit.UseX             = CUnit.DAU_UseX;
DAUnit.UseS             = CUnit.DAU_UseS;
DAUnit.[Accum7..Accum0] = Accum;
DAUnit.[Offset7..Offset0] = IRLowEight;
DataAB                  = DAUnit.[DataAddr7..DataAddr0];

PAUnit.Direct           = CUnit.PAU_Direct;
PAUnit.Relative         = CUnit.PAU_Relative;
PAUnit.Hold             = CUnit.PAU_Hold;
PAUnit.RTS0             = CUnit.PAU_RTS0;
PAUnit.RTS1             = CUnit.PAU_RTS1;
PAUnit.Inc              = CUnit.PAU_Inc;
PAUnit.[Direct12..Direct0] = CUnit.[IR12..IR0];
" The Offset of the PAU is selected from either the DDB or the instruction reg
PAUnit.[Offset7..Offset0]  = (IRLowEight & CUnit.PAU_FromIR) 
                            # (DataDB & !CUnit.PAU_FromIR);
ProgramAB               = PAUnit.[ProgAddr12..ProgAddr0];

" When writing to the DDB, data is selected from one of four sources: the accum,
" the flags, the low bits of the program counter, and the high bits of the PC
DataDB                  = (Accum & !CUnit.DDB_Mux1 & !CUnit.DDB_Mux0) #
                            (Flags & !CUnit.DDB_Mux1 & CUnit.DDB_Mux0) #
                            (PAUnit.[PC7..PC0] & CUnit.DDB_Mux1 & !CUnit.DDB_Mux0) #
                            ([0, 0, 0, PAUnit.PC12, PAUnit.PC11, PAUnit.PC10, PAUnit.PC9, PAUnit.PC8] & CUnit.DDB_Mux1 & CUnit.DDB_Mux0);

" output enables

" Data data bus is enabled when writing
DataDB.OE  =  CUnit.WR;

" most signals are always enabled
ProgramAB.OE         =  ^h1FFF;
DataAB.OE            =  ^hFF;
RD.OE                =  1;
WR.OE                =  1;
IO.OE                =  1;
[Accum7..Accum0].OE  =  ^hFF;
[Flags7..Flags0].OE  =  ^hFF;
[XReg7..XReg0].OE    =  ^hFF;
[SReg7..SReg0].OE    =  ^hFF;


END  CPU
